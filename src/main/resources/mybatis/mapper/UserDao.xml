<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.zb.dao.UserDao">

    <select id="selectByUsername" parameterType="string" resultType="com.zb.entity.User">
        select t.id,t.username,t.password,t.type,t.real_name as realName,t.nick_name as nickName,t.mobile,
        t.create_time as createTime, t.update_time as updateTime from t_user t
        WHERE t.username = #{username}
    </select>

    <select id="queryPageableData" resultType="com.zb.dto.UserDto" parameterType="com.zb.dto.UserDto">
        select t.id,t.username,t.password,t.type,t.real_name as realName,t.nick_name as nickName,t.mobile,
        t.create_time as createTime, t.update_time as updateTime from t_user t
        <where>
            <if test="null != username">
                and t.username like concat('%', #{username} ,'%')
            </if>
            <if test="null != nickName">
                    AND t.`nick_name` like concat('%', #{nickName} ,'%')
            </if>
            <if test="null != mobile">
                    AND t.`mobile` like concat('%', #{mobile} ,'%')
            </if>
        </where>
        order by t.id desc
    </select>

    <insert id="insert" useGeneratedKeys="true" keyProperty="id" parameterType="com.zb.entity.Business">
        insert into t_user (`username`, `password`, `type`, `real_name`, `nick_name`, `mobile`) values (#{username},#{password},#{type},#{realName},#{nickName},#{mobile})
    </insert>

    <update id="update" parameterType="com.zb.entity.User">
        update t_user set username = #{username}, `password` = #{password},type = #{type},real_name = #{realName},
        mobile = #{mobile},update_time = #{updateTime} WHERE id = #{id}
    </update>

    <select id="selectById" parameterType="int" resultType="com.zb.entity.User">
        select t.id,t.username,t.password,t.type,t.real_name as realName,t.nick_name as nickName,t.mobile,
        t.create_time as createTime, t.update_time as updateTime from t_user t
        WHERE t.id = #{id}
    </select>

    <delete id="delete" parameterType="int">
        delete from t_user where id = #{id}
    </delete>

    <select id="selectCountByUsername" resultType="int">
        select count(1) from t_user t
        <where>
            <if test="null != username">
                and t.username = #{username}
            </if>
            <if test="null != excludeId">
                and t.id != excludeId
            </if>
        </where>

    </select>
    
</mapper>